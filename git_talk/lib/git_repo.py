import git
import os
import sys
import github

'''
git remote set-url origin https://s106916:password@github.customerlabs.com.au/s106916/iag-edh_cli_test.git/
download : https://git-scm.com/download/win
git --version >2.2.5
'''

class GitRepo():
    def __init__(self):
        self.url = ''
        self.local = ''
        self.branch = ''
        self.branches = []
        self.active_branch = ''
        self.assign_branch = ''
        self.repo = None

        
    def init(self, repo):
        status = False
        try:
            self.local =repo["path"]
            self.repo = git.Repo(self.local)
            #self.repo.git.remote.set_url('origin',cred)
            self.active_branch = self.repo.active_branch
            self.branches = self.repo.branches
            self.url = repo["url"]
            self.assign_branch = repo["branch"]
            self.repo = repo["repo"]
            status = True
        except OSError as e:
            print('Invalid path:',str(e))
        return status
        
    def checkout(self, branch, new=False):
        status = False
        if branch != '':
            try:
                if new:
                    self.repo.git.checkout('-b', branch)
                    self.repo.git.branch('--set-upstream-to', 'origin/'+branch, branch )
                else:
                    self.repo.git.checkout(branch)
                self.active_branch = self.repo.active_branch
                status = True
            except Exception as e:
                print(str(e))
        return status

    def clone(self, git_url,path):
        status = False
        path =path.strip()
        try:
            if not os.path.exists(path):
                os.mkdir(path)
            # os.chdir(path)
        except OSError as e:
            print('Invalid path:',str(e))
            return status
        try:
            self.url = git_url
            self.local = path
            self.repo = git.Repo.clone_from(git_url, path,config='http.sslVerify=false')
            self.active_branch = self.repo.active_branch
            status = True
        except Exception as e:
            print(str(e))
            print('Fail to clone:{0} to: {1}'.format(git_url,path))
        return status
    
    def get_id(self):
        git.util.get_user_id()
    
    def rebase(self):
        status = False
        return status

    def pr(self, rev_name, git_from, git_into):
        status = False
        target = git_into + ':' + git_from
        #target = git_into
        try:    
            self.repo.git.request_pull('-p',rev_name, self.url, target )
            status =True
        except Exception as e:
            print(str(e))
        return status

    def add(self):
        status = False
        return status

    def commit(self):
        status = False
        return status
    def push(self,message):

        status = False
        if self.pull():
            '''
            Short (72 chars or less) summary
            https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53
            More detailed explanatory text. Wrap it to 72 characters. The blank
            line separating the summary from the body is critical (unless you omit
            the body entirely).

            Write your commit message in the imperative: "Fix bug" and not "Fixed
            bug" or "Fixes bug." This convention matches up with commit messages
            generated by commands like git merge and git revert.

            Further paragraphs come after blank lines.

            - Bullet points are okay, too.
            - Typically a hyphen or asterisk is used for the bullet, followed by a
            single space. Use a hanging indent.
            '''
            try:
                self.repo.git.add()
                self.repo.index.commit(message)
                origin = self.repo.remote(name='origin')
                origin.push()
                print('Committed all your changes to remote')                
                status = True
            except Exception as e:
                print(str(e))
                print('Some error occured while pushing the code at branch:',self.branch) 
        
        return status

    def pull(self):
        status = False
        try:
            o = self.repo.remotes.origin
            o.pull()
            print('Completed pulling from:{0} to: {1}'.format(self.url,self.local))
            status = True
        except Exception as e:
            print(str(e))
            print('Fail to pull from:{0} to: {1}'.format(self.url,self.local))
        return status

if __name__ == "__main__":
    url = 'https://github.customerlabs.com.au/s106916/iag-edh_cli_test'
    local = 'c:/test/iag-edh_cli_test'
    branch = 'test2'
    g = GitRepo()
    g.init(local,url, 'master')
    # #if g.clone(url,local):
    # print(g.repo)
    #g.checkout(branch,new=True)
    #print(g.branches)
    #print(g.active_branch)
    
    g.push(message="I love github most test 2")
    #g.pr('test1', 'test1', 'master')
    